from __future__ import annotations

from dataclasses import dataclass
from typing import TYPE_CHECKING
from uuid import UUID  # noqa: TCH003

from sqlalchemy import ForeignKey
from sqlalchemy.dialects.postgresql import JSONB
from sqlalchemy.orm import Mapped, MappedColumn, mapped_column, relationship
from uuid_utils import uuid7

from .base import Base

if TYPE_CHECKING:
    from .user_input import UserInput


@dataclass
class ModelCompletion:
    """
    A single completion generated by the model.
    """

    #: The generated portion of the sentence.
    sentence: str
    #: The probabilities associated with each token of the sentence.
    probability: list[float]


class Completion(Base):
    """
    The completions generated by the model.
    """

    __tablename__ = "completions"

    id: MappedColumn[UUID] = mapped_column(
        primary_key=True,
        default_factory=lambda: str(uuid7()),
        init=False,
    )
    #: The completions generated by the model.
    completions: MappedColumn[list[ModelCompletion]] = mapped_column(JSONB)
    #: The id of the user input associated with the completion
    user_input_id: MappedColumn[UUID] | None = mapped_column(
        ForeignKey("user_inputs.id", onupdate="CASCADE", ondelete="CASCADE"),
        init=False,
    )
    #: The user input associated with the completion.
    user_input: Mapped[UserInput] = relationship(back_populates="completion")
